import { Injectable } from '@angular/core';
import { EnsService } from './ens.service';
import { ContractService } from './contract.service';
import { ConnectService } from './connect.service';

// tslint:disable-next-line:max-line-length
const abi = [ { 'inputs': [], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'constructor' }, { 'anonymous': false, 'inputs': [ { 'indexed': true, 'name': 'key', 'type': 'bytes32' }, { 'indexed': true, 'name': 'purpose', 'type': 'uint256' }, { 'indexed': true, 'name': 'keyType', 'type': 'uint256' } ], 'name': 'KeyAdded', 'type': 'event' }, { 'anonymous': false, 'inputs': [ { 'indexed': true, 'name': 'key', 'type': 'bytes32' }, { 'indexed': true, 'name': 'purpose', 'type': 'uint256' }, { 'indexed': true, 'name': 'keyType', 'type': 'uint256' } ], 'name': 'KeyRemoved', 'type': 'event' }, { 'anonymous': false, 'inputs': [ { 'indexed': true, 'name': 'executionId', 'type': 'uint256' }, { 'indexed': true, 'name': 'to', 'type': 'address' }, { 'indexed': true, 'name': 'value', 'type': 'uint256' }, { 'indexed': false, 'name': 'data', 'type': 'bytes' } ], 'name': 'ExecutionRequested', 'type': 'event' }, { 'anonymous': false, 'inputs': [ { 'indexed': true, 'name': 'executionId', 'type': 'uint256' }, { 'indexed': true, 'name': 'to', 'type': 'address' }, { 'indexed': true, 'name': 'value', 'type': 'uint256' }, { 'indexed': false, 'name': 'data', 'type': 'bytes' } ], 'name': 'Executed', 'type': 'event' }, { 'anonymous': false, 'inputs': [ { 'indexed': true, 'name': 'executionId', 'type': 'uint256' }, { 'indexed': false, 'name': 'approved', 'type': 'bool' } ], 'name': 'Approved', 'type': 'event' }, { 'constant': true, 'inputs': [ { 'name': '_key', 'type': 'bytes32' } ], 'name': 'getKey', 'outputs': [ { 'name': 'purposes', 'type': 'uint256[]' }, { 'name': 'keyType', 'type': 'uint256' }, { 'name': 'key', 'type': 'bytes32' } ], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': true, 'inputs': [ { 'name': '_key', 'type': 'bytes32' } ], 'name': 'getKeyPurposes', 'outputs': [ { 'name': 'purposes', 'type': 'uint256[]' } ], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': true, 'inputs': [ { 'name': '_purpose', 'type': 'uint256' } ], 'name': 'getKeysByPurpose', 'outputs': [ { 'name': '_keys', 'type': 'bytes32[]' } ], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': false, 'inputs': [ { 'name': '_key', 'type': 'bytes32' }, { 'name': '_purpose', 'type': 'uint256' }, { 'name': '_type', 'type': 'uint256' } ], 'name': 'addKey', 'outputs': [ { 'name': 'success', 'type': 'bool' } ], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }, { 'constant': false, 'inputs': [ { 'name': '_id', 'type': 'uint256' }, { 'name': '_approve', 'type': 'bool' } ], 'name': 'approve', 'outputs': [ { 'name': 'success', 'type': 'bool' } ], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }, { 'constant': false, 'inputs': [ { 'name': '_to', 'type': 'address' }, { 'name': '_value', 'type': 'uint256' }, { 'name': '_data', 'type': 'bytes' } ], 'name': 'execute', 'outputs': [ { 'name': 'executionId', 'type': 'uint256' } ], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }, { 'constant': false, 'inputs': [ { 'name': '_key', 'type': 'bytes32' }, { 'name': '_purpose', 'type': 'uint256' } ], 'name': 'removeKey', 'outputs': [ { 'name': 'success', 'type': 'bool' } ], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }, { 'constant': true, 'inputs': [ { 'name': '_key', 'type': 'bytes32' }, { 'name': '_purpose', 'type': 'uint256' } ], 'name': 'keyHasPurpose', 'outputs': [ { 'name': 'exists', 'type': 'bool' } ], 'payable': false, 'stateMutability': 'view', 'type': 'function' } ];
// tslint:disable-next-line:max-line-length
const bytecode = '0x608060405234801561001057600080fd5b50733d36c4e7a10a71250a52c50735aec69b7f6230c36330864be560006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060006040518083038186803b15801561007d57600080fd5b505af4158015610091573d6000803e3d6000fd5b50505050610cb9806100a46000396000f3fe60806040526004361061008e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806312aaac70146100935780631d3812401461013157806353d413c514610198578063747442d3146101f55780639010f72614610254578063b61d27f6146102e4578063d202158d146103ea578063fb307b3414610447575b600080fd5b34801561009f57600080fd5b506100cc600480360360208110156100b657600080fd5b81019080803590602001909291905050506104d7565b6040518080602001848152602001838152602001828103825285818151815260200191508051906020019060200280838360005b8381101561011b578082015181840152602081019050610100565b5050505090500194505050505060405180910390f35b34801561013d57600080fd5b5061017e6004803603606081101561015457600080fd5b81019080803590602001909291908035906020019092919080359060200190929190505050610605565b604051808215151515815260200191505060405180910390f35b3480156101a457600080fd5b506101db600480360360408110156101bb57600080fd5b8101908080359060200190929190803590602001909291905050506106cf565b604051808215151515815260200191505060405180910390f35b34801561020157600080fd5b5061023a6004803603604081101561021857600080fd5b8101908080359060200190929190803515159060200190929190505050610790565b604051808215151515815260200191505060405180910390f35b34801561026057600080fd5b5061028d6004803603602081101561027757600080fd5b8101908080359060200190929190505050610855565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156102d05780820151818401526020810190506102b5565b505050509050019250505060405180910390f35b3480156102f057600080fd5b506103d46004803603606081101561030757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561034e57600080fd5b82018360208201111561036057600080fd5b8035906020019184600183028401116401000000008311171561038257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610963565b6040518082815260200191505060405180910390f35b3480156103f657600080fd5b5061042d6004803603604081101561040d57600080fd5b810190808035906020019092919080359060200190929190505050610abe565b604051808215151515815260200191505060405180910390f35b34801561045357600080fd5b506104806004803603602081101561046a57600080fd5b8101908080359060200190929190505050610b7f565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156104c35780820151818401526020810190506104a8565b505050509050019250505060405180910390f35b6060600080733d36c4e7a10a71250a52c50735aec69b7f6230c363b01a9fb36000866040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018281526020019250505060006040518083038186803b15801561055057600080fd5b505af4158015610564573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250606081101561058e57600080fd5b8101908080516401000000008111156105a657600080fd5b828101905060208101848111156105bc57600080fd5b81518560208202830111640100000000821117156105d957600080fd5b505092919060200180519060200190929190805190602001909291905050509250925092509193909250565b6000733d36c4e7a10a71250a52c50735aec69b7f6230c3635d601c3a60008686866040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018085815260200184815260200183815260200182815260200194505050505060206040518083038186803b15801561068b57600080fd5b505af415801561069f573d6000803e3d6000fd5b505050506040513d60208110156106b557600080fd5b810190808051906020019092919050505090509392505050565b6000733d36c4e7a10a71250a52c50735aec69b7f6230c3633f47616d600085856040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180848152602001838152602001828152602001935050505060206040518083038186803b15801561074d57600080fd5b505af4158015610761573d6000803e3d6000fd5b505050506040513d602081101561077757600080fd5b8101908080519060200190929190505050905092915050565b6000733d36c4e7a10a71250a52c50735aec69b7f6230c36367d4865f600085856040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018084815260200183815260200182151515158152602001935050505060206040518083038186803b15801561081257600080fd5b505af4158015610826573d6000803e3d6000fd5b505050506040513d602081101561083c57600080fd5b8101908080519060200190929190505050905092915050565b6060733d36c4e7a10a71250a52c50735aec69b7f6230c363746199f96000846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018281526020019250505060006040518083038186803b1580156108cb57600080fd5b505af41580156108df573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561090957600080fd5b81019080805164010000000081111561092157600080fd5b8281019050602081018481111561093757600080fd5b815185602082028301116401000000008211171561095457600080fd5b50509291905050509050919050565b6000733d36c4e7a10a71250a52c50735aec69b7f6230c363e9356c6f60008686866040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610a2d578082015181840152602081019050610a12565b50505050905090810190601f168015610a5a5780820380516001836020036101000a031916815260200191505b509550505050505060206040518083038186803b158015610a7a57600080fd5b505af4158015610a8e573d6000803e3d6000fd5b505050506040513d6020811015610aa457600080fd5b810190808051906020019092919050505090509392505050565b6000733d36c4e7a10a71250a52c50735aec69b7f6230c363d8188a40600085856040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180848152602001838152602001828152602001935050505060206040518083038186803b158015610b3c57600080fd5b505af4158015610b50573d6000803e3d6000fd5b505050506040513d6020811015610b6657600080fd5b8101908080519060200190929190505050905092915050565b6060733d36c4e7a10a71250a52c50735aec69b7f6230c3630f982bac6000846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018281526020019250505060006040518083038186803b158015610bf557600080fd5b505af4158015610c09573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015610c3357600080fd5b810190808051640100000000811115610c4b57600080fd5b82810190506020810184811115610c6157600080fd5b8151856020820283011164010000000082111715610c7e57600080fd5b5050929190505050905091905056fea165627a7a7230582038fc73c138d2443483efcda9346dd1403ecdc028fa8b7f35c1f7206a971d7b730029';

@Injectable()
export class RegisterService {
  constructor(
    private contractService: ContractService,
    private connectService: ConnectService,
    private ensService: EnsService
  ) { }

  async createIdContract() {
    // Key Holder Library address = 0x3d36c4e7a10a71250a52c50735aec69b7f6230c3
    return await this.contractService.deployContract(abi, bytecode, []);
  }

  async registerKey(address: string) {
    const contract = await this.contractService.accessContract(address, abi);
    console.log(await contract.methods.getKeysByPurpose(1).call());
  }

  async register(appname: string , username: string) {
    console.log('In register service.');
    const idContractAddress = await this.createIdContract();
    console.log('Received contract: ' + idContractAddress);
    this.connectService.setIDContractAddress(idContractAddress);
    this.registerKey(idContractAddress);
    await this.ensService.createSubdomain(appname, username, idContractAddress);
  }
}
